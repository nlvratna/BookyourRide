// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int    @id @default(autoincrement())
  userName     String
  email        String @unique
  password     String
  phoneNumber  String
  role         Role?  @default(USER)
  refreshToken String

  Owner Owner?

  bookings Bookings[]

  @@map("users")
}

model Owner {
  id       String @id @default(uuid())
  location String
  shopName String
  details  Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int    @unique
  car      Car[]
}

enum Role {
  USER
  RENTAL_OWNER
}

model Car {
  id          String     @id @default(uuid())
  name        String
  type        CarType
  brand       String
  images      Image[]
  pricePerDay Decimal    @db.Money
  isBooked    Boolean    @default(false)
  bookings    Bookings[]

  owner   Owner  @relation(fields: [ownerId], references: [id], onDelete: NoAction)
  ownerId String
}

model Image {
  id        Int    @id @default(autoincrement())
  imageName String
  car       Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@index([id, carId])
}

enum CarType {
  TwoSeater
  FiveSeater
  SevenSeater
}

model Bookings {
  id        String   @id @default(uuid())
  startDate DateTime @db.Date
  endDate   DateTime @db.Date

  car      Car    @relation(fields: [carId], references: [id])
  carId    String
  bookedBy Users  @relation(fields: [userId], references: [id])
  userId   Int
}
